---
import Layout from "../layouts/Layout.astro";
import HomeSection from "../components/sections/HomeSection.tsx";
import HomeSectionMobile from "../components/sections/HomeSectionMobile.tsx";
import ScrollIndicator from "../components/ScrollIndicator.tsx";
import AboutMeSection from "../components/sections/AboutMeSection.tsx";
---

<Layout
	title="Anthony"
	description="Anthony's portfolio website."
	bodyClass="bg-primary"
>
	<style>
		.buffer-top {
			top: calc(-50svh + 102px);
			@media (max-width: 768px) {
				top: calc(-50svh + 74px);
			}
		}
		.buffer-bottom {
			top: calc(50svh - 102px);
			@media (max-width: 768px) {
				top: calc(50svh - 74px);
			}
		}
	</style>
	<script>
		type ArrowKey = "ArrowUp" | "ArrowDown" | "ArrowLeft" | "ArrowRight";

		const code: ArrowKey[] = [
			"ArrowUp",
			"ArrowUp",
			"ArrowDown",
			"ArrowDown",
			"ArrowLeft",
			"ArrowRight",
			"ArrowLeft",
			"ArrowRight",
		];
		let pressed: ArrowKey[] = [];

		const handleKeyPress = (event: { key: string }) => {
			const pressedKey = event.key as ArrowKey;
			if (code[pressed.length] === pressedKey) {
				pressed.push(pressedKey);
				if (pressed.length === code.length) {
					window.location.href = "https://www.youtube.com/watch?v=dQw4w9WgXcQ";
					pressed = [];
				}
			} else {
				pressed = [];
			}
		};

		let startX: number = 0;
		let startY: number = 0;
		const handleSwipeStart = (event: TouchEvent) => {
			startX = event.changedTouches[0].screenX;
			startY = event.changedTouches[0].screenY;
		};
		const handleSwipeEnd = (event: TouchEvent) => {
			const diffX: number = event.changedTouches[0].screenX - startX;
			const diffY: number = event.changedTouches[0].screenY - startY;

			if (Math.abs(diffX) > Math.abs(diffY)) {
				handleKeyPress({
					key: diffX > 0 ? "ArrowRight" : "ArrowLeft",
				} as KeyboardEvent);
			} else {
				handleKeyPress({
					key: diffY > 0 ? "ArrowDown" : "ArrowUp",
				} as KeyboardEvent);
			}
		};

		const handleScroll = () => {
			const element = document.getElementById("home");
			// window.innerHeight on mobile changes when the menu is visible
			// so we need to use the svh element to calculate the height
			const smallHeight: any = document.getElementById("svh")?.clientHeight;
			const iconHeight = window.innerWidth > 768 ? 204 : 148;
			if (!element) return;
			if (window.scrollY > window.innerHeight) {
				element.classList.remove("fixed", "buffer-top");
				element.classList.add("absolute");
			} else if (window.scrollY > smallHeight - iconHeight) {
				element.classList.remove("absolute", "buffer-bottom");
				element.classList.add("fixed", "buffer-top");
			} else if (window.scrollY > smallHeight * 0.5 - iconHeight / 2) {
				element.classList.remove("fixed");
				element.classList.add("absolute", "buffer-bottom");
			} else {
				element.classList.remove("absolute", "buffer-bottom", "buffer-top");
				element.classList.add("fixed");
			}
		};

		window.addEventListener("scroll", handleScroll);
		window.addEventListener("keydown", handleKeyPress);
		window.addEventListener("touchstart", handleSwipeStart);
		window.addEventListener("touchend", handleSwipeEnd);
	</script>
	<section id="home" class="fixed w-full">
		<div class="hidden md:block">
			<HomeSection client:load />
		</div>
		<div class="block md:hidden">
			<HomeSectionMobile client:load />
		</div>
	</section>
	<!-- Buffer so the scrolling works as intended -->
	<div id="svh" class="h-svh"></div>
	<ScrollIndicator client:idle />
	<section class="relative h-screen bg-tetriary">
		<AboutMeSection client:idle />
	</section>
	<section class="h-screen"></section>
</Layout>
