---
import Layout from "../layouts/Layout.astro";
import HomeSection from "../components/sections/HomeSection.tsx";
import HomeSectionMobile from "../components/sections/HomeSectionMobile.tsx";
import ScrollIndicator from "../components/ScrollIndicator.tsx";
import SecondSection from "../components/sections/SecondSection.tsx";
---

<Layout title="Anthony">
	<style>
		@media (min-width: 768px) {
			.buffer {
				top: 50%;
			}
		}
		.buffer {
			top: 37vh;
		}
		@media (min-width: 768px) {
			.buffer2 {
				margin-top: -50%;
			}
		}
		.buffer2 {
			margin-top: -34vh;
		}
	</style>
	<script>
		type ArrowKey = "ArrowUp" | "ArrowDown" | "ArrowLeft" | "ArrowRight";

		const code: ArrowKey[] = [
			"ArrowUp",
			"ArrowUp",
			"ArrowDown",
			"ArrowDown",
			"ArrowLeft",
			"ArrowRight",
			"ArrowLeft",
			"ArrowRight",
		];
		let pressed: ArrowKey[] = [];

		const handleKeyPress = (event: { key: string }) => {
			if (code.includes(event.key as ArrowKey)) {
				if (code[pressed.length] === event.key) {
					pressed.push(event.key);
					console.log(pressed);
				} else {
					pressed = [];
				}
				if (pressed.length === code.length) {
					window.location.href = "https://www.youtube.com/watch?v=dQw4w9WgXcQ";
				}
			} else {
				pressed = [];
			}
		};

		let StartX: number = 0;
		let StartY: number = 0;
		const handleSwipeStart = (event: TouchEvent) => {
			StartX = event.changedTouches[0].screenX;
			StartY = event.changedTouches[0].screenY;
		};
		const handleSwipeEnd = (event: TouchEvent) => {
			const diffY: number = event.changedTouches[0].screenY - StartY;
			const diffX: number = event.changedTouches[0].screenX - StartX;
			if (Math.abs(diffX) > Math.abs(diffY)) {
				if (diffX > 0) {
					handleKeyPress({ key: "ArrowRight" } as KeyboardEvent);
				}
				if (diffX < 0) {
					handleKeyPress({ key: "ArrowLeft" } as KeyboardEvent);
				}
			} else {
				if (diffY > 0) {
					handleKeyPress({ key: "ArrowDown" } as KeyboardEvent);
				}
				if (diffY < 0) {
					handleKeyPress({ key: "ArrowUp" } as KeyboardEvent);
				}
				if (diffY === 0) {
					handleKeyPress({ key: "ArrowUp" } as KeyboardEvent);
				}
			}
		};

		const handleScroll = () => {
			const element = document.getElementById("1");
			if (!element) return;

			if (window.innerWidth > 768) {
				if (window.scrollY > window.innerHeight) {
					element.classList.remove("fixed", "buffer2");
					element.classList.add("absolute");
				} else if (window.scrollY > window.innerHeight * 0.71) {
					console.log(`520 = ${520 / window.innerHeight}`);
					element.classList.add("fixed", "buffer2");
					element.classList.remove("absolute", "buffer");
				} else if (window.scrollY > window.innerHeight * 0.37) {
					console.log(`270 = ${270 / window.innerHeight}`);
					element.classList.remove("fixed", "buffer2");
					element.classList.add("absolute", "buffer");
				} else if (window.scrollY > 0) {
					element.classList.add("fixed");
					element.classList.remove("absolute", "buffer");
				}
			} else if (window.innerWidth < 7680) {
				if (window.scrollY > window.innerHeight) {
					element.classList.remove("fixed");
					element.classList.add("absolute");
					element.classList.remove("buffer2");
				} else if (window.scrollY > 500) {
					element.classList.add("fixed");
					element.classList.remove("absolute");
					element.classList.remove("buffer");
					element.classList.add("buffer2");
				} else if (window.scrollY > 250) {
					element.classList.remove("fixed");
					element.classList.add("absolute");
					element.classList.add("buffer");
					element.classList.remove("buffer2");
				} else if (window.scrollY > 0) {
					element.classList.add("fixed");
					element.classList.remove("absolute");
					element.classList.remove("buffer");
				}
			}
		};

		window.addEventListener("scroll", handleScroll);
		window.addEventListener("keydown", handleKeyPress);
		window.addEventListener("touchstart", handleSwipeStart);
		window.addEventListener("touchend", handleSwipeEnd);
	</script>
	<section id="1" class="fixed w-full">
		<div class="hidden md:block">
			<HomeSection client:load />
		</div>
		<div class="block md:hidden">
			<HomeSectionMobile client:load />
		</div>
	</section>
	<ScrollIndicator client:idle />
	<div class="h-screen"></div>
	<section class="relative h-screen bg-slate-600">
		<SecondSection client:idle />
	</section>
	<section class="h-screen"></section>
</Layout>
